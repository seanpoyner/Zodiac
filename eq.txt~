function [errorsum] = least_squares_error(x,x0,y)
    [m,z] = size(x);
    errorsum = 0;
    for i = 1:m
        errorsum = errorsum + ((y(i,1)-least_squares_sol(x0(i,1),x(i,1)))^2);
    end
endfunction

function [x0] = least_squares(x,y,n)
    [m,z] = size(x);
    b = 0;
    for k = 1:(n+1)
        q = 0;
        b = b + 1;
        for j = b:(n+b)
            q = q + 1;
            xsum = 0;
            ysum = 0;
            for i = 1:m
                xsum = xsum + (x(i,1)^(j-1));
                ysum = ysum + (y(i,1)*(x(i,1)^(k-1)));
            end
            A(k,q) = xsum;
            A(k,4) = ysum;
        end
        x0 = geb(A)
end

function [X] = Equidistance(a,b,n)
    n = n - 1;
    j = b/n;
    X = [a];
    for i = (a+j):j:b
        X(1,$+1) = i;
    end
endfunction

function [sol] = least_squares_sol(x0,term)
    [m,z] = size(x0);
    sol = x0(1,1);
    for i = 2:m
        sol = sol + ((x0(i,1)^(i-1))*term);
    end
endfunction

function [x0] = linear_least_squares(x,y)
    // BEGIN Setup //
    x_2 = [];
    xy = [];
    x_sum = 0;
    x_2_sum = 0;
    xy_sum = 0;
    y_sum = 0;
    [a,b] = size(x);
    
    for i = 1:a
        x_2(i,1) = x(i,1)^2;
        xy(i,1) = x(i,1)*y(i,1);
        x_sum = x_sum + x(i,1); 
        x_2_sum = x_2_sum + x_2(i,1);
        xy_sum = xy_sum + xy(i,1);
        y_sum = y_sum + y(i,1);
    end
    
    a0 = ((x_2_sum*y_sum)-(x_sum*xy_sum))/((a*x_2_sum)-(x_sum^2));
    a1 = ((a*xy_sum) - (x_sum*y_sum))/((a*x_2_sum)-(x_sum^2));
    x0 = [a1 a0];
endfunction

